-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | KLM-style defeasible reasoning implementation written in Haskell
--   
--   KLM-style defeasible reasoning implementation written in Haskell
@package hasklm
@version 0.1.0.0


-- | Propositional types module
module PropositionalTypes

-- | The <a>Name</a> type represents the name of an <a>Atom</a>.
type Name = String

-- | The <a>Valuation</a> type encodes a propositional valuation.
type Valuation = [(Name, Bool)]

-- | The <a>Formula</a> datatype encodes a propositional formula.
data Formula

-- | A constant Boolean constructor.
Const :: Bool -> Formula

-- | The propositional <a>Atom</a> constructor.
Atom :: Name -> Formula

-- | The <a>Not</a> (negation) unary connective constructor.
Not :: Formula -> Formula

-- | The <a>And</a> (conjunction) binary connective constructor.
And :: Formula -> Formula -> Formula

-- | The <a>Or</a> (disjunction) binary connective constructor.
Or :: Formula -> Formula -> Formula

-- | The <a>Implies</a> (if then) binary connective constructor.
Implies :: Formula -> Formula -> Formula

-- | The <a>Iff</a> (if and only if) binary connective constructor.
Iff :: Formula -> Formula -> Formula

-- | The <a>KnowledgeBase</a> type encodes a propositional knowledge base.
type KnowledgeBase = [Formula]
instance GHC.Show.Show PropositionalTypes.Formula
instance GHC.Classes.Eq PropositionalTypes.Formula


-- | Propositional parser module
module PropositionalParser

-- | language definition
languageDef :: GenLanguageDef String u Identity
lexer :: GenTokenParser String u Identity
identifier :: ParsecT String u Identity String
reserved :: String -> ParsecT String u Identity ()
reservedOp :: String -> ParsecT String u Identity ()
parens :: ParsecT String u Identity a -> ParsecT String u Identity a
whiteSpace :: ParsecT String u Identity ()
propositionalParser :: Parser Formula
formula :: Parser Formula
operators :: [[Operator Char st Formula]]
term :: ParsecT String () Identity Formula
atom :: ParsecT String u Identity Formula
constBool :: ParsecT String u Identity Formula

-- | parseString function parses a string into a logical formula
parseString :: String -> Formula


-- | Propositional helpers module
module PropositionalHelpers

-- | The <a>int2bool</a> function takes in two ints and returns a Boolean
--   list.
int2bool :: Int -> Int -> [Bool]

-- | The <a>removeDuplicates</a> function returns the given list without
--   duplicates.
removeDuplicates :: Eq a => [a] -> [a]

-- | The <a>subValuation</a> function returns whether or not at least one
--   of the given list of <a>Valuation</a>s is a subset of the given
--   <a>Valuation</a>.
subValuation :: [Valuation] -> Valuation -> Bool

-- | The <a>subsumes</a> function takes in two <a>Valuation</a> lists and
--   returns whether the first list subsumes the second.
subsumes :: [Valuation] -> [Valuation] -> Bool


-- | Propositional logic module
module PropositionalLogic

-- | The <a>atoms</a> function returns an <a>Atom</a> <a>Name</a> list for
--   the given <a>Formula</a>.
atoms :: Formula -> [Name]

-- | The <a>assigns</a> function returns the corresponding <a>Atom</a> 's
--   Boolean value for the given <a>Valuation</a>.
assigns :: Valuation -> Name -> Bool

-- | The <a>satisfies</a> function evaluates the given <a>Formula</a> for
--   the given <a>Valuation</a>.
satisfies :: Valuation -> Formula -> Bool

-- | The <a>valuations</a> function returns all possible <a>Valuation</a>s
--   for the given <a>KnowledgeBase</a>.
valuations :: KnowledgeBase -> [Valuation]

-- | The <a>isValid</a> function returns the validity of the given
--   <a>Formula</a>.
isValid :: Formula -> Bool

-- | The <a>models</a> function returns the models (satisfying
--   <a>Valuation</a>s) of the given <a>Formula</a>.
models :: KnowledgeBase -> [Valuation]

-- | The <a>isSatisfiable</a> function returns the satisfiability of the
--   given <a>KnowledgeBase</a>.
isSatisfiable :: KnowledgeBase -> Bool

-- | The <a>entails</a> function returns whether or not the given
--   <a>KnowledgeBase</a> entails the given <a>Formula</a>.
entails :: KnowledgeBase -> Formula -> Bool

-- | The <a>str2form</a> function returns the <a>Formula</a> encoding for
--   the given String.
str2form :: String -> Formula


-- | Defeasible logic types module
module DefeasibleTypes

-- | The <a>DefeasibleImplication</a> type encodes a typical consequence
--   relation.
data DefeasibleImplication
Typically :: Formula -> Formula -> DefeasibleImplication

-- | The <a>State</a> type encodes a preferential <a>State</a>.
type State = [Formula]

-- | The <a>RankedModels</a> type encodes preferentially ranked models.
type RankedModels = [State]

-- | The <a>DefeasibleKnowledgeBase</a> type encodes a defeasible knowledge
--   base.
type DefeasibleKnowledgeBase = [DefeasibleImplication]

-- | The <a>JointKnowledgeBase</a> type encodes a knowledge base /
--   defeasible knowledge base relation.
type JointKnowledgeBase = (KnowledgeBase, DefeasibleKnowledgeBase)
instance GHC.Show.Show DefeasibleTypes.DefeasibleImplication


-- | Defeasible helpers module
module DefeasibleHelpers

-- | The <a>antecedant</a> function returns the antecedant for a given
--   <a>Formula</a>.
antecedant :: Formula -> Formula

-- | The <a>combinations</a> function returns the combinatorial subsets of
--   a list of a specified size.
combinations :: Int -> [a] -> [[a]]

-- | The <a>baseRankAux</a> function is the auxiliary function for the
--   <tt>baseRank</tt> function.
baseRankAux :: KnowledgeBase -> KnowledgeBase -> RankedModels -> RankedModels

-- | The <a>entailsRCAux</a> function is the auxiliary function for the
--   <tt>entailsRC</tt> function.
entailsRCAux :: RankedModels -> Formula -> Bool

-- | The <a>entailsLCAux</a> function is the auxiliary function for the
--   <tt>entailsLC</tt> function. NOTE: This is a highly experimental
--   function and its correctness has not been validated.
entailsLCAux :: RankedModels -> Formula -> Bool


-- | Defeasible logic module
module DefeasibleLogic

-- | The <tt>twiddle</tt> function takes in two propositional
--   <a>Formula</a>s and returns a <a>DefeasibleImplication</a>. NOTE: This
--   is a temporary function until a parser is built to handle this
typically :: Formula -> DefeasibleImplication

-- | The <a>materialise</a> function returns the corresponding
--   <a>KnowledgeBase</a> for the given <a>DefeasibleKnowledgeBase</a>.
materialise :: DefeasibleKnowledgeBase -> KnowledgeBase

-- | The <a>baseRank</a> function returns the <a>RankedModels</a> for the
--   given <a>JointKnowledgeBase</a>.
baseRank :: JointKnowledgeBase -> RankedModels

-- | The <a>entailsRC</a> function returns whether or not the given
--   <tt>DefeasibleInterpretation</tt> is defeasibly entailed (using
--   Rational Closure) by the given <a>JointKnowledgeBase</a>.
entailsRC :: JointKnowledgeBase -> DefeasibleImplication -> Bool

-- | The <a>entailsLC</a> function returns whether or not the given
--   <tt>DefeasibleInterpretation</tt> is defeasibly entailed (using
--   Lexicographic Closure) by the given <a>JointKnowledgeBase</a>. NOTE:
--   This is a highly experimental function and its correctness has not
--   been validated.
entailsLC :: JointKnowledgeBase -> DefeasibleImplication -> Bool
